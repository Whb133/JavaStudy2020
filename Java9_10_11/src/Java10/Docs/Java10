一.局部变量类型推断
    1.产生背景
        开发者经常抱怨Java中引用代码的程度。局部变量的显示类型声明，常常被认为是不必须的，给一个好听的名字经常可以很清楚的表达出下面应该怎样继续。
    2.好处:
        减少了哕嗦和形式的代码，避免了信息冗余，而且对齐了变量名，更容易阅读!
    3.举例如下:
        ➢场景一:类实例化时
            作为Java开发者，在声明一个变量时，我们总是习惯了敲打两次变量类型，第一次用于声明变量类型，第二次用于构造器。
                LinkedHashSet<Integer> set = new LinkedHashSet<>();
        ➢场景二:返回值类型含复杂泛型结构
            变量的声明类型书写复杂且较长，尤其是加上泛型的使用
                Iterator<Map.Entry<Integer, Student>> iterator = set.iterator();
        ➢场景三:
            我们也经常声明一种变量，它只会被使用一次，而且是用在下一行代码中，比如: .
                URL url = new URL("http://www.atguigu.com");
                URLConnection connection = url.openConnection( );
                Reader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        尽管IDE可以帮我们自动完成这些代码，但当变量总是跳来跳去的时候，可读性还是会受到影响，因为变量类型的名称由各种不同长度的字符组成。
        而且，有时候开发人员会尽力避免声明中间变量，因为太多的类型声明只会分散注意力，不会带来额外的好处。
二.局部变量类型推断不使用情况说明
    1.
三.工作原理
    在处理var时，编译器先是查看表达式右边部分，并根据右边变量值的类型进行推断，作为左边变量的类型，然后将该类型写入字节码当中。
    注意
    1.var不是一个关键字
        你不需要担心变量名或方法名会与var发生冲突，因为var实际上并不是一个关键字，而是一个类型名，只有在编译器需要知道类型的地方才需要用到它。
        除此之外，它就是一个普通合法的标识符。也就是说，除了不能用它作为类名，其他的都可以，但极少人会用它作为类名。
    2.这不是avaScript
        首先我要说明的是，var并不会改变Java是一个静态类型语言的事实。编译器负责推断出类型，并把结果写入字节码文件，就好像是开发人员自己敲入类型一样。
        下面是使用IntelliJ (实际上是Fernflower的反编译器)反编译器反编译出的代码:
四.集合新增创建不可变集合的方法，
    java10的新特性二:集合中新增的copy0f(),用于创建一 个只读的集合
    自Java 9开始，Jdk 里面为集合(List / Set / Map)都添加了of (jdk9新增和)copyOf (jdk10新增)方法，它们两个都用来创建不可变的集合.
        来看下它们的使用和区别。