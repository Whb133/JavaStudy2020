一.java8和java9的jdk中文件目录不同

二.模块化系统: Jigsaw→Modularity
    1.谈到Java 9大家往往第一个想到的就是Jigsaw项目。Java已经发展超过20年(95年最初发布)，Java和相关生态在不断丰富的同时也暴露出一些问题:
        ➢Java 运行环境的膨胀和臃肿。每次JVM启动的时候，至少会有30~60MB的内存加载，主要原因是JVM需要加载rt.jar，
            不管其中的类是否被classloader加载，第一步整个jar都会被JVM加载到内存当中去(而模块化可以根据模块的需要加载程序运行需要的class)
        ➢当代码库越来越大，创建复杂，盘根错节的“意大利面条式代码”的几率呈指数级的增长。
            不同版本的类库交叉依赖导致让人头疼的问题，这些都阻碍了Java开发和运行效率的提升。
        ➢很难真正地对代码进行封装,而系统并没有对不同部分(也就是JAR文件)之间的依赖关系有个明确的概念。
            每一个公共类都可以被类路径之下任何其它的公共类所访问到，这样就会导致无意中使用了并不想被公开访问的API。.
    2.本质上讲，模块(module)的概念，其实就是package外再裹一层，也就是说，用模块来管理各个package,通过声明某个package暴露，不声明默认就是隐藏。
        因此，模块化使得代码组织上更安全，因为它可以指定哪些部分可以暴露，哪些部分隐藏。
        exports 暴露   requires  引入某个外部module
    3.实现目标
        ➢模块化的主要目的在于减少内存的开销
        ➢只须必要模块，而非全部jdk模块，可简化各种类库和大型应用的开发和维护
        ➢改进JavaSE平台，使其可以适应不同大小的计算设备
        ➢改进其安全性，可维护性，提高性能
三.Java的REPL工具: jShell命令
    1.产生背景
        像Python和Scala之类的语言早就有交互式编程环境REPL(read - evaluate - print -loop)了，以交互式的方式对语句和表达式进行求值。
        开发者只需要输入一些代码，就可以在编译前获得对程序的反馈。而之前的Java版本要想执行代码，必须创建文件、声明类、提供测试方法方可实现。
    2.设计理念
        即写即得、快速运行
    3.实现目标
        ➢Java9中终于拥有了REPL工具: jShell。 让Java可以像脚本语言一样运行，
            从控制台启动jShell,利用jShell在没有创建类的情况下直接声明变量，计算表达式，执行语句。
            即开发时可以在命令行里直接运行Java的代码，而无需创建Java文件，无需跟人解释”public static void main(String[] args)”这句废话。
        ➢jShell也可以从文件中加载语句或者将语句保存到文件中。
        ➢jShell也可以是tab键进行自动补全和自动添加分号。
    4.使用jshell
        注：必要要在D:\DevTools\Java\jdk11.0.7\jdk-11.0.7\bin>路径下才能有效运行jshell（或者设置环境变量）
                在JShell 环境下，语句术尾的“,"是可选的。但推荐还是最好加上。提高代码可读性。
                我们还可以重新定义相同方法名和参数列表的方法，即为对现有方法的修改(或覆盖)
                不用定义类或方法，可直接使用
                没有受检时异常（在java中报异常的语句在jshell命令下不报受检时异常）
                    说明:本来应该强迫我们捕获一个lOException，但却没有出现。因为jShell在后台为我们隐藏了。

        举例：
        jshell System.out.println("helloworld");
        jshell int a=10;
        导入指定的包  import java.util.*;
        导入基础的包 ：jshell imports
        查看当前session下所有代码（cmd命令行窗口变为文本编辑框）：jshell :/edit (该编辑框会记录当前Session所有已经执行的命令)
        查看当前session下所有创建过的变量 jshell：/vars
        查看当前session下所有创建过的变量 jshell:/methods
        jshell:/open filepath 直接执行该路径上的文件，可以不需要类定义
        退出jshell jshell：/exit

四.语法改进:接口的私有方法
    Java 8中规定接口中的方法除了抽象方法之外，还可以定义静态方法和默认的方法。一定程度上，扩展了接口的功能，此时的接口更像是一个抽象类。
    在Java9中，接口更加的灵活和强大，连方法的访问权限修饰符都可以声明为private的了，此时方法将不会成为你对外暴露的API的一部分。

五.语法改进:钻石操作符使用升级
    与匿名实现类共同使用钻石操作符(diamondoperator)在Java8中如下的操作是会报错的:
    Comparator<Object> com = new Comparator<>(){
        @Override
        public int compare(Object o1, Object o2) {
            return 0;
        }
    };
    编译报错信息: Cannot use“<>”with anonymous inner classes.

六.语法改进:try语句
    Java8中，可以实现资源的自动关闭，但是要求执行后必须关闭的所有资源必须在try子句中初始化，否则编译不通过。如下例所示:
        try(InputStreamReader reader = new InputStreamReader(System.in)){
            //读取数据细节省略
        }catch (lOException e){
            e.printStackTrace();
        }
    Java9中，用资源语句编写try将更容易，我们可以在try子句中使用已经初始化过的资源，
    此时的资源是final的（不能在try语句内部对reader，writer进行更改），此时资源属性是常量:
        InputStreamReader reader = new InputStreamReader(System.in);
        OutputStreamWriter writer = new OutputStreamWriter(System.out);
        try (reader ; writer) {
            //reader是final的，不可再被赋值
            //reader = null;
            //具体读写操作省略
        } catch (IOException e) {
            e.printStackTrace();
        }
七.String存储结构变更
    jdk8 String存储结构  private final char[] value;
    jdk9 String存储结构  private final byte[] value;
    结论: String 再也不用char[]来存储啦，改成了byte[] 加上编码标记，节约了一些空间。

    public final class String
        implements java.io.Serializable, Comparable<String>, CharSequence {
        @Stable
        private final byte[] value;
    }
    那StringBuffer和StringBuilder是否仍无动于衷呢?
        String related classes such as AbstractStringBuilder, StringBuilder,and StringBuffer will be updated
        to use the same representation(使用了相同的取代), as will the HotSpot VM's intrinsic(固有的、内置的) string operations.
八.集合工厂方法:快速创建只读集合
    要创建一个只读、不可改变的集合，必须构造和分配它，然后添加元素，最后包装成一个不可修改的集合。
        List<String> namesList = new ArrayList <>();
        namesList.add("Joe");
        namesList.add("Bob");
        namesList.add("Bill");
        namesList = Collections.unmodifiableList(namesList);
        System.out.println(namesList);
    缺点:我们一下写了五行。即:它不能表达为单个表达式。
九.InputStream加强
    InputStream有了一个非常有用的方法: transferTo，可以用来将数据直接传输到OutputStream，这是在处理原始数据流时非常常见的一种用法，如下示例。
        ClassLoader cl = this. getClass(). getClassLoader();
        try (InputStream is = c1.getResourceAsStream("hello. txt");
            OutputStream os = new FileOutputStream("src\\hello1.txt")) {
                is. transferTo(os); //把输入流中的所有数据直接自动地复制到输出流中
        }catch(IOException e) {
            e. printStackTrace();
        }
十.增强的Stream API
    1.Java 的Stream API是java标准库最好的改进之一，让开发者能够快速运算，从而能够有效的利用数据并行计算。Java8提供的Steam能够利用多核架构实现声明式的数据处理。
    2.在Java9中，Stream API变得更好，Stream 接口中添加了4个新的方法:
        takeWhile, dropWhile, ofNullable，还有个iterate方法的新重载方法，可让你提供一个Predicate(判断条件)来指定什么时候结束迭代。
    3.除了对Stream本身的扩展，Optional和Stream之间的结合也得到了改进。
        现在可以通过Optional的新方法stream()将一个Optional对象转换为一个(可能是空的)Stream对象。
    4.方法的使用
        takeWhile()的使用
            用于从Stream中获取一部分数据，接收一个Predicate 来进行选择。在有序的Stream中，takeWhile 返回从开头开始按照指定规则的尽量多的元素。
        dropWhile()的使用
            dropWhile的行为与takeWhile相反，返回剩余的元素。
        ofNullable()的使用
            Java8中Stream不能完全为null，否则会报空指针异常（Stream.of()参数中的多个元素，可以包含null值,不能存储单独元素为null的值）。
            而Java9中的ofNullable方法允许我们创建一个单元素Stream(形参变量是可以为nuLl值的单个元素)，
            可以包含一个非空元素，也可以创建一个空Stream。
        iterate()重载的使用
            这个iterate()方法的新重载方法，可以让你提供一个Predicate (判断条件)来指定什么时候结束迭代。

十一.Optional获取Stream的方法
        Optional类中stream()的使用
十二、Javascript引擎升级: Nashorn
    1.Nashorn 项目在JDK 9中得到改进，它为Java提供轻量级的Javascript运行时。
        Nashorn项目跟随Netscape 的Rhino 项目，目的是为了在Java中实现一个高性能但轻量级的Javsscript运行时。
        Nashorn项目使得Java应用能够嵌入Javascript。它在JDK 8中为Java提供一个Javascript引擎。
    2.JDK 9包含一个用来解析Nashorn的ECMAScript语法树的API。
        这个API使得IDE和服务端框架不需要依赖Nashorn项目的内部实现类，就能够分析ECMAScript代码。









