一.Collections概述
    ●Collections是-一个操作Set、List 和Map等集合的工具类。（操作数组的工具类: Arrays）
    ●Collections中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作，还提供了对集合对象设置不可变、对集合对象实现同步控制等方法

二.Collections常用方法
    ●排序操作:(均为static方法)
        ➢reverse(List):反转List中元素的顺序（逆序）
        ➢shuffle(List):对List集合元素进行随机排序
        ➢sort(List):根据元素的自然顺序对指定List集合元素按升序排序
        ➢sort(List, Comparator): 根据指定的Comparator产生的顺序对List集合元素进行排序;
        ➢swap(List, int, int): 将指定list 集合中的i处元素和j处元素进行交换
    ●查找、替换操作
        ➢Object max(Collection):根据元素的自然顺序，返回给定集合中的最大元素
        ➢Object max(Collection，Comparator): 根据Comparator指定的顺序，返回给定集合中的最大元素
        ➢Object min(Collection):根据元素的自然顺序，返回给定集合中的最小元素
        ➢Object min(Collection，Comparator): 根据Comparator指定的顺序，返回给定集合中的最小元素
        ➢int frequency(Collection)，Object): 返回指定集合中指定元素的出现次数
        ➢void copy(List dest,List src):将src中 的内容复制到dest中
            //报异常: IndexOutOfBoundsException( "Source does not fit in dest")
            //List dest = new ArrayList();
            //Collections. copy(dest,list);size和capation不一样

            List dest = Arrays.asList(new object[list.size()]);
            System.out.println(dest.size());//list.size();
            Collections.copy(dest,list);

        ➢boolean replaceAll(List list, Object oldVal, Object newVal):使用新值替换List对象的所有旧值

    ●同步控制
        ➢Collections类中提供了多个synchrlonizedXxx()方法，该方法可使将指定集合包装成线程同步的集合，
        从而可以解决多线程并发访问集合时的线程安全问题。对整个集合加锁。


