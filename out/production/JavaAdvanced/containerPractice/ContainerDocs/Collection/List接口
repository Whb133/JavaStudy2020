一.List接口概述
    ●鉴于Java中数组用来存储数据的局限性，我们通常使用List替代数组
    ●List集合类中元素有序、且可重复，集合中的每个元素都有其对应的顺序索引。
    ●List容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素。
    ●JDK API中List接口的实现类常用的有: ArrayList、 LinkedList和Vector。

二.ArrayList、LinkedList、Vetcor三者异同
    三个类都是实现了List接口，存储数据的特点相同:存储有序的、可重复的数据，可以存储null。

    ArrayList: 作为List接口的主要实现类;线程不安全的，效率高;底层使用0bject[] elementData存储
    Linkedlist: 对于频繁的插入、删除操作，使用此类效率比ArrayList高; 底层使用双向链表存储
    Vector:作为List 接口的古老实现类;线程安全的，效率低;底层使用object[] elementData存储
三.ArrayList过程源码分析

    1.jdk 7情况下
    ArrayList list = new ArrayList();//底层创建了长度是10的0bject[]数组eLementData
    ArrayList(){this(10);}
    与StringBuffered类似，不过StringBuffered初始默认容量为16.

    List. add(123);//eLementData[0] = new Integer(123);
    List. add(11);//如果此次的添加导致底层elementData数组容量不够，则扩容。
    默认情况下，扩容为原来的容量的1.5倍(newCapation = oldCapation+(oldCapation>>1))，
    StringBuffered扩容为原来的二倍+2(newCapation = (oldCapation<<1)+2)，
    同时需要将原有数组中的数据复制到新的数组中。
    结论:建议开发中使用带参的构造器: ArrayList list = new ArrayList(int capacity)

    2.jdk 8中ArrayList的变化:
    ArrayList list = new ArrayList();//底层object[] eLementData初始化为{}.并没有创建长度为10的数组，
    public ArrayList() {
    this. elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;
    }

    list. add(123);//第一-次调用add()时，底层才创建了长度为10的数组，并将数据123添加到eLementData[0]
    后续的添加和扩容操作 与jdk 7无异。

    3.小结:
    jdk7 中的ArrayList的对象的创建类似于单例的饿汉式，
    而jdk8 中的ArrayList的对象的创建类似于单例的懒汉式，延迟了数组的创建，节省内存。

三.LinkedList过程源码分析
    LinkedList List = new LinkedList();内部声明了Node类型的first和Last属性，默认值为null.
    list. add(123);//将123封装到Node中，创建了Node对象。

    其中，Node定义为:  (体现了LinkedList的双向链表的说法)
    private static cLass Node<E> {
        E item;
        Node<E> next;
        Node<E> prev;
        Node(Node<E> prev, E element, Node<E> next) {
            this. item = eLement;
            this.next = next;
            this.prev = prev;
        }
    }

四.Vector过程源码分析
    Vector 的源码分析: jdk7和jdk8 中通过Vector()构造器创建对象时，底层都创建了长度为10的数组，
    在扩容方面，默认扩容为原来的数组长度的2倍。


五.ArrayList常用方法
    void add(int index, object ele):在index位置插入ele元素
    boolean addALl(int index, Collection eles): 从index位置开始将eles中的所有元素添加进来
    object get(int index): 获取指定index位置的元素
    int indexOf(Object obj): 返回obj在集合中首次出现的位置
    int lastIndexOf(Object obj): 返回obj在当前集合中末次出现的位置
    object remove(int index): 移除指定index位置的元素，并返回此元素
    object set(int index, object ele): 设置指定index位置的元素为ele
    List subList(int fromIndex, int toIndex): 返回从fromIndex到toIndex位置的于集合

    区分List中remove(int index) 和remove(0bject obj)
    remove(2);//删除索引位置为2的元素
    remove(new Ingeter(2));//删除元素是2的对象





