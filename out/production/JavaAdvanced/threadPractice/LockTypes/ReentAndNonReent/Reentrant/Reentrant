可重入锁

广义上的可重入锁指的是可重复可递归调用的锁，在外层使用锁之后，在内层仍然可以使用，并且不发生死锁（前提得是同一个对象或者class），
这样的锁就叫做可重入锁。ReentrantLock和synchronized都是可重入锁
不可重入锁，与可重入锁相反，不可递归调用，递归调用就发生死锁。

可重入锁就是一个类的A、B两个方法，A、B都有获得同一把锁，当A方法调用时，获得锁，在A方法的锁还没有被释放时，调用B方法时，B方法也获得该锁。
这种情景，可以是不同的线程分别调用这个两个方法。也可是同一个线程，A方法中调用B方法，这个线程调用A方法。

不可重入锁就是一个类的A、B两个方法，A、B都有获得统一把锁，当A方法调用时，获得锁，
在A方法的锁还没有被释放时，调用B方法时，B方法也获得不了该锁，必须等A方法释放掉这个锁。

在java 中，synchronized和java.util.concurrent.locks.ReentrantLock是可重入锁。

当一个线程获得当前实例的锁lock，并且进入了方法A，该线程在方法A没有释放该锁的时候，是否可以再次进入使用该锁的方法B？
不可重入锁：在方法A释放锁之前，不可以再次进入方法B
可重入锁：在方法A释放该锁之前可以再次进入方法B