一.Stream API说明
    ●Java8中有两大最为重要的改变。第一个是Lambda表达式;另外一个是Stream API。
    ●Stream API(java.util.stream)把真正的函数式编程风格引入到Java中。这是目前为止对Java类库最好的补充，
        因为Stream API可以极大提供Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。
    ●Stream是Java8中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。
        使用Stream API对集合数据进行操作，就类似于使用SQL执行的数据库查询。也可以使用Stream API来并行执行操作。
        简言之，StreamAPl 提供了一种高效且易于使用的处理数据的方式。
二.为什么要使用Stream API
    ●实际开发中，项目中多数数据源都来自于Mysql, Oracle等。但现在数据源可以更多了，有MongDB，Radis等， 而这些NoSQL的数据就需要Java层面去处理。
    ●Stream和Collection集合的区别:
        Collection是一种静态的内存数据结构，而Stream是有关计算的。前者是主要面向内存，存储在内存中，后者主要是面向CPU，通过CPU实现计算。
三.什么是Stream
    Stream是数据渠道，用于操作数据源(集合、数组等)所生成的元素序列。
    “集合讲的是数据，Stream讲的是计算!”
    注意:
        ①Stream自己不会存储元素。
        ②Stream不会改变源对象。相反，他们会返回一个持有结果的新Stream。
        ③Stream操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。
四.Stream的操作三个步骤
    ●1- 创建Stream
        一个数据源(如:集合、数组)，获取一个流
    ●2- 中间操作
        一个中间操作链，对数据源的数据进行处理，
    ●3- 终止操作(终端操作)
        -旦执行终止操作，就执行中间操作链，并产生结果。之后，不会再被使用(不执行终止操作，中间操作不执行)
五.创建Stream
    方式一:通过集合
        Java8中的Collection接口被扩展，提供了两个获取流的方法:
            ●default Stream<E> stream() :返回一个顺序流
            ●default Stream<E> parallelStream():返回一个并行流

    方式二:通过数组p
        Java8中的Arrays的静态方法stream()可以获取数组流:
            ●static <T> Stream<T> stream(T[] array):返回一个流
            重载形式，能够处理对应基本类型的数组:
                ●public static IntStream stream(int[] array)
                ●public static LongStream stream(long[] array)
                ●public static DoubleStream stream(double[] array)
    方式三:通过Stream的of()
        可以调用Stream类静态方法of(), 通过显示值创建一个流。它可以接收任意数量的参数。
            ●public static<T> Stream<T> of(T.. values):返回一个流
    方式四:创建无限流。
        可以使用静态方法Stream.iterate()和Stream.generate(),创建无限流。
        ●迭代
            public static<T> Stream<T> iterate(final T seed, final UnaryOperator<T> f)
        ●生成
            public static<T> Stream<T> generate(Supplier<T> s)
六.中间操作
    多个中间操作可以连接起来形成一个流水线，除非流水线上触发终止操作，否则中间操作不会执行任何的处理!
    而在终止操作时一次性全部处理，称为“惰性求值”。
     1.筛选与切片
            filter(Predicate p)     接收Lambda，从流中排除某些元素。
            limit(n)    截断流，使其元素不超过给定数量。
            skip(n)     跳过元素，返回一个扔掉了前n个元素的流。若流中元素不足n个，则返回-个空流。与limit(n)互补
            distinct()   筛选，通过流所生成元素的hashCode()和equals()去除重复元素
     2.映射
            map(Function f)     接收一个函数作为参数，将元素转换成其他形式或提取信息，该函数会被应用到每个元素上，并将其映射成一个新的元素。
            flatMap(Function f)  接收一个函数作为参数，将流中的每个值都换成另一个流 ，然后把所有流连接成一个流。
     3.排序
            sorted()    产生一个新流，其中按自然顺序排序
            sorted(Comparator com)      产生一个新流，其中按比较器顺序排序（定制排序）
七.终止操作
    终端操作会从流的流水线生成结果。其结果可以是任何不是流的值。例如: List、Integer, 甚至是void。
    流进行了终止操作后，不能再次使用。
    1.匹配与查找
    allMatch(Predicate p)       检查是否匹配所有元素
    anyMatch(Predicate p)       检查是否至少匹配-一个 元素
    noneMatch(Predicate p)      检查是否没有匹配所有元素
    findFirst()                 返回第一个元素
    findAny()                   返回当前流中的任意元素

    count()             返回流中元素的总个数
    max(Comparator c)   返回流中最大值
    min(Comparator c)   返回流中最小值
    forEach(Consumer c) 内部迭代
        forEach(Consumer c)-内部迭代。
        使用Collection 接口需要用户去做迭代，称为外部迭代。相反，Stream API使用内部迭代,它邦你把迭代做了
    2.归约
        reduce(T iden, BinaryOperator b)    可以将流中元素反复结合起来，得到一个值。返回T
        reduce(BinaryOperator b)    可以将流中元素反复结合起来，得到一个值。返回Optional<T>
            备注: map和reduce的连接通常称为map-reduce模式，因Google用它来进行网络搜索而出名。
    3.收集
        collect(Collector c)    将流转换为其他形式。接收一个Collector接口的实现，用于给Stream中元素做汇总的方法
            Collector接口中方法的实现决定了如何对流执行收集的操作(如收集到List、Set、Map)。
            另外，Collectors 实用类提供了很多静态方法，可以方便地创建常见收集器实例，具体方法与实例如下表:






