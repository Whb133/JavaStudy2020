一.泛型概念
    ●所谓泛型，就是允许在定义类、接口时通过一个标识表示类中某个属性的类型或者是某个方法的返回值及参数类型。
    这个类型参数将在使用时(例如，继承或实现这个接口，用这个类型声明变量、创建对象时)确定(即传入实际的类型参数，也称为类型实参)
    ●从JDK1.5以后，Java引入了“参数化类型(Parameterized type) ”的概念，允许我们在创建集合时再指定集合元素的类型，
    正如: List<String>， 这表明该List只能保存字符串类型的对象。
    ●JDK1.5改写了集合框架中的全部接口和类，为这些接口、类增加了泛型支持，从而可以在声明集合变量、创建集合对象时传入类型实参。|

二.为什么要有泛型？

    集合容器类在设计阶段/声明阶段不能确定这个容器到底实际存的是什么类型的对象，
    所以在JDK1.5之前只能把元素类型设计为Object，JDK1.5之后使用泛型来解决。
    因为这个时候除了元素的类型不确定，其他的部分是确定的，
    例如关于这个元素如何保存，如何管理等是确定的，因此此时把元素的类型设计成-一个参数，这个类型参数叫做泛型。
    Collection<E>， List<E>， ArrayList<E> 这个<E>就是类型参数，即泛型。

三.在集合中使用泛型:

    ①集合接口或集合类在jdk5.0时都修改为带泛型的结构。
    ②在实例化集合类时，可以指明具体的泛型类型。
    ③指明完以后，在集合类或接口中凡是定义类或接口时，内部结构((比如:方法、构造器、属性等)使用到类的泛型的位置，都指定为实例化的泛型类型。
        比如: add(E e) ---> 实例化以后: add(Integer e)
    ④注意点:泛型的类型必须是类，不能是基本数据类型。需要用到基本数据类型的位置，拿包装类替换。
    ⑤如果实例化时，没有指明泛型的类型。默认类型为java. lang. object类型。

四.如何自定义泛型结构:泛型类、泛型接口、泛型方法？
    泛型类
    public class Order<R> {}
    public class SubOrder<R>  extends Order<R> {}
    由于子类在继承带泛型的父类时，指明了泛型类型。则实例化子类对象时，不再需要指明泛型。

    1.泛型类可能有多个参数，此时应将多个参数一 起放在尖括号内。比如: .<E1,E2,E3>
    2.泛型类的构造器如下: public GenericClass(){}。
        而下面是错误的: public GenericClass<E>()}
    3.实例化后，操作原来泛型位置的结构必须与指定的泛型类型一致。
    4.泛型不同的引用不能相互赋值。
        >尽管在编译时ArrayList<String>和ArrayList<Integer>是两种类型，但是，在运行时只有一个ArrayList被加载到JVM中。
    5.泛型如果不指定，将被擦除，泛型对应的类型均按照Object处理，但不等价于Object。
        经验:泛型要使用一路都用。要不用，一路都不要用。
    6.如果泛型类是一个接口或抽象类，则不可创建泛型类的对象。
    7.jdk1.7泛型的简化操作: ArrayList<Fruit> flist = new ArrayList<>();
    8.泛型的指定中不能使用基本数据类型，可以使用包装类替换。
    9.在类/接口上声明的泛型，在本类或本接口中即代表某种类型，可以作为非静态属性的类型、非静态方法的参数类型、非静态方法的返回值类型。
        但在静态方法中不能使用类的泛型。|
    10.异常类不能是泛型的
    11.不能使用new E[]。但是可以: E[] elements = (E[])new Object[capacity];
        参考: ArrayList源码中声明: Object[] elementData，而非泛型参数类型数组。
    12.父类有泛型，子类可以选择保留泛型也可以选择指定泛型类型:
        ●子类不保留父类的泛型:按需实现
            ➢没有类型擦除
            ➢具体类型
        ●子类保留父类的泛型:泛型子类
            ➢全部保留
            ➢部分保留
    结论:子类必须是“富二代”，子类除了指定或保留父类的泛型，还可以增加自己的泛型。
        class Father<T1, T2> {}
        //子类不保留父类的泛型
            // 1)没有类型擦除
                class Son1 extends Father {//等价于class Son extends Father<0bject , 0bject>{}
            // 2)具体类型
                class Son2 extends Father<Integer, String> {}
        //子类保留父类的泛型
            // 1)全部保留
                class Son3<T1, T2> extends Father<T1, T2> {}
            // 2)部分保留
                class Son4<T2> extends Father<Integer, T2> {}

        class Father<T1, T2> {}
        // 子类不保留父类的泛型
            // 1)没有类型擦除
                class Son<A, B> extends Father{//等价于class Son extends Father<0bject , 0bject>{}
            // 2)具体类型
                class Son2<A, B> extends Father<Integer, String> {}
        //子类保留父类的乏型
            // 1)全部保留
                class Son3<T1, T2, A, B> extends Father<T1, T2> {}
            // 2)部分保留
                class Son4<T2, A, B> extends Father<Integer, T2> {}


    泛型方法
        //泛型方法:在方法中出现了泛型的结构，泛型参数与类的泛型参数没有任何关系。
        //换句话说，泛型方法所属的类是不是泛型类都没有关系。
        //泛型方法在调用时，须指明泛型参数的类型。
        //泛型方法，可以声明为静态的。原因:泛型参数是在调用方法时确定的。并非在实例化类时确定。

        public <E> List<E> copyFromArrayTolist(E[] arr){
            ArrayList<E> list = new ArrayList<>();
            for(E e : arr){
                list.add(e);
            }
        return list;
        }

四.泛型在继承方面的体现
    虽然类A是类B的父类，但是G<A> 和 G<B>二者不具备子父类关系，二者是并列关系。
    补充:类是类B的父类，A<G> 是B<G>的父类.

五.通配符的使用
    通配符: ?
    类A是类B的父类，G<A>和G<B>是没有关系的，二者共同的父类是: G<?>

    ●<?>  允许所有 泛型的引用调用

    有限制条件的通配符的使用
    ●通配符指定上限
        上限extends:使用时指定的类型必须是继承某个类，或者实现某个接口，即<=(不超过)
    ●通配符指定下限
        下限super: 使用时指定的类型不能小于操作的类，即>=(不低于)
    ●举例:
        ➢<? extends Number>   (无穷小，Number]
            只允许泛型为Number及Number子类的引用调用
        ➢<? super Number>     [Number ,无穷大)
            只允许法型为Number及Number父类的引用调用
        ➢<? extends Comparable>
            只允许泛型为实现Comparable接口的实现类的引用调用











