内部类
1.Java中允许将一个类A声明在类B中，则类A是内部类，类B是外部类。
2.内部类的分类
    成员内部类（静态、非静态）
    局部内部类（方法内、构造器内、代码块内）
3.成员内部类
    一方面：作为外部类成员
            调用外部类结构
            可以被static修饰
            可被4种不同权限修饰
    另一方面：作为一个类
            类内可以定义属性、方法、构造器、代码块、内部类。
            可以被final修饰，此类不能被继承（若没有final修饰，则可以继承）
            可以被abstract修饰
4.如何创建内部了对象
    静态：
        Outer.Inner sinn = new Outer().Inner();
    非静态：
        Outer.Inner sinn = new Outer().new Inner();
5.如何在成员内部类中区分调用外部类结构
    内部类中使用this
    外部类使用： 外部类名.this
6.在局部内部类的方法中，如果调用外部类所声明的方法中的局部变量，要求此局部变量必须声明为final的（jdk1.8默认final）
7.内部类可以直接访问外部类（包装类）的成员变量或成员方法。
8.内部类对象默认拥有一个外部类的引用。
9.如果不使用嵌套，即两个类并列，编译后会存在两个class文件，如使用内部类嵌套，编译后也有两个class文件
    而内部类文件名为外部类名$内部类名.class
10.好处：
    可以方便的访问外部类的成员（变量或方法）
    可以更清晰的组织逻辑，防止不应该被其他类访问的类进行访问
11.何时使用
    该类不允许或不需要其他类进行访问时（逻辑简单、使用次数少、代码量少）
12.匿名内部类
    内部类：
    class A{
        class B{

        }
    }
    匿名内部类：
    class A{
        public void method(){
            //此类为匿名内部类
            new className(){
                类体......;
            }
        }
    }
