一.概述
    Lambda是一个匿名函数，我们可以把Lambda表达式理解为是一段可以传递的代码（将代码像数据一样进行传递) 。
    使用它可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升。
    只要一个对象是函数式接口的实例，那么该对象就可以用Lambda表达式来表示。
二.Lambda表达式的使用
    1.举例: (01,02) -> Integer. compare(o1, o2);
    2.格式:
        -> : lambda操作符或箭头操作符
        ->左边: Lambda形参列表 (其实就是接口中的抽象方法的形参列表)
        ->右边: lambda体 (其实就是重写的抽象方法的方法体)
    3.Lambda表达式的使用: (分为6种情况介绍)
              --1 //语法格式一:无参，无返回值   (RunnnableTest)
              --2 //语法格式二: Lambda 需要-一个参数，但是没有返回值 （ConsumerTest）
              --3 //语法格式三:数据类型可以省略，因为可由编译器推断得出，称为“类型推断户 (ConsumerTestP)
              --4 //语法格式四: Lambda 若只需要一-个参数时，参数的小括号可以省略 （ConsumerTestPP）
              --5 //语法格式五: Lambda 需要两个或以上的参数，多条执行语句，并且可以有返回值 （ComparatorTest）
              --6 //语法格式六:当Lambda体只有一条语句时，return与大括号若有，都可以省略 (ComparatorTestP)

        总结:
            ->左边: Lambda形参列表的参数类型可以省略;如果Lambda形参列表只有一个参数， 其一对()也可以省略。
            ->右边: Lambda体应该使用一对{}包裹;如果Lambda体只有一条执行语句(可能是return语句)，可以省略这一对{}和return关键字。

    4. Lambda表达式的本质:作为接口的实例

