一.什么是函数式(Functional)接口
    只包含一个抽象方法的接口，称为函数式接口。
    可以通过Lambda表达式来创建该接口的对象。(若Lambda表达式抛出一个受检异常(即:非运行时异常)，那么该异常需要在目标接口的抽象方法上进行声明)，
    可以在一个接口上使用@FunctionalInterface注解，这样做可以检查它是否是一个函数式接口。同时javadoc也会包含一条声明，说明这个接口是一个函数式接口。
    在java.util.function包下定义了Java 8的丰富的函数式接口

二.如何理解函数式接口
    Java从诞生日起就是一直倡导“一切皆对象”，在Java里面面向对象(OOP)编程是-切。
        但是随着python、scalal等语言的兴起和新技术的挑战，Java不得不做出调整以便支持更加广泛的技术要求，
        也即java不但可以支持OOP还可以支持O0F(面向函数编程)
    在函数式编程语言当中，函数被当做一等公民对待。在将函数作为一等公民的编程语言中，Lambda表达式的类型是函数。
        但是在Java8中，有所不同。在Java8中，Lambda表达式是对象，而不是函数，它们必须依附于一类特别的对象类型---函数式接口。
    简单的说，在Java8中，Lambda表达式就是一个函数式接口的实例。这就是Lambda表达式和函数式接口的关系。
        也就是说，只要一个对象是函数式接口的实例，那么该对象就可以用Lambda表达式来表示。
    所以以前用匿名实现类表示的现在都可以用Lambda表达式来写。

三.java内置的4大核心函数式接口
    消费型接口Consumer<T>       void accept(T t)
    供给型接口Supplier<T>       T get()
    函数型接口Function<T, R>    R apply(T t)
    断定型接口Predicate<T>      boolean test(T t)

