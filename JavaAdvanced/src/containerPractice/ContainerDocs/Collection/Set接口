一.Set接口概述
    Set接口中没有额外定义新的方法，使用的都是Collection 中声明过的方法。
    Set接口:存储无序的、才可重复的数据 -->高中讲的“集合
        HashSet: 作为Set接口的主要实现类;线程不安全的;可以存储null值。
            LinkedHashSet:作为HashSet的子类;遍历其内部数据时，是按照元素添加的顺序。
                LinkedHashSet作为HashSet的子类，在添加数据的同时，每个数据还维护两个引用，记录此数据前一个和后一个数据，
                优点：对于频繁的遍历操作，LinkedHashSet效率高于HashSet.|
        TreeSet（底层使用红黑树存储数据）: 可以按照添加对象的指定属性，进行排序,不可以存储null。且只能存储某一类的对象。


二.Set特性说明
    以HashSet为例
    无序性：无序性并非是随机性，只是相对于数据存储时的位置。
            List在存储数据时是有序的，因为其在往数组中存储数据时是按照数组索引从小到大依次存储。
            HashSet在存储数据时是无序的，因为其在存储数据时是根据数据的哈希值确定位置的。
    不可重复性：保证添加的元素按照equals()判断时，不能返回true. 即:相同的元素只能添加一个。
            如果添加自定义类型的数据，需要重写equals方法和hashcode方法。否则是可以存在两个相同数据的。


二.添加元素的过程（以HashSet为例）
    HashSet底层也是数组，初始容量为16，当如果使用率超过0.75，(16*0.75=12)
        就会扩大容量为原来的2倍。(16扩容为32，依次为64,128...等 )

    向HashSet中添加元素a，首先调用a所在类的hashcode（）方法，计算元素a的哈希值，
    此哈希值接着通过某种算法（哈希算法）计算出在HashSet底层数组中存放的位置（即为：索引位置），
    然后判断数组此位置上是否已经存在元素，
      若此位置还未有其他元素存在，则将元素a添加到此位置。                                                   ------情况一
      若此位置已经存在其他元素b(或以链表形式存在的多个元素)，则比较元素a与元素b(或以链表形式存在的多个元素)的哈希值，
        若和某元素哈希值不相同，则证明元素a与已存在元素b（或以链表形式存在的多个元素）不相同，则则将元素a添加到此位置。------情况二
        若和某元素哈希值相同，则证明元素a与已存在元素b（或以链表形式存在的多个元素）可能相同，则需要调用元素a所在类的equals()方法，
          equals()返回true，相同类型相同元素已存在，添加失败。
          equals()返回false，则元素a与该位置其他元素不相同，添加成功。                                      ------情况三

    对于添加成功的情况2和情况3而言:元素a与已经存在指定索引位置上数据以链表的方式存储。
        jdk 7 :元素a放到数组中，指向原来的元素。
        jdk 8 :原来的元素在数组中，指向元素a。
    总结:七上八下
三.hashCode()和equals()
    要求:向Set中添加的数据，其所在的类定要重写hashCode()和equals()方法
    要求:重写的hashCode()和equals()尽可能保持一致性: 相等的对象必须具有相等的散列码
    重写两个方法的小技巧:对象中用作equals()方法比较的Field,都应该用来计算hashCode。

四.TreeSet（底层红黑树）
    1.向TreeSet中添加的数据，要求是相同类的对象。
    2.两种排序方式:自然排序(实现Comparable接口)和定制排序(Comparator接口)
    3.自然排序中，比较两个对象是否相同的标准为: compareTo()返回e.不再是equals().
    4.定制排序中，比较两个对象是否相同的标准为: compare() 返回e.不再是equals().


